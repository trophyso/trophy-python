# This file was auto-generated by Fern from our API Definition.

import typing
from ....core.client_wrapper import SyncClientWrapper
from .types.create_streak_freezes_request_freezes_item import (
    CreateStreakFreezesRequestFreezesItem,
)
from ....core.request_options import RequestOptions
from ....types.create_streak_freezes_response import CreateStreakFreezesResponse
from ....core.serialization import convert_and_respect_annotation_metadata
from ....core.pydantic_utilities import parse_obj_as
from ....errors.bad_request_error import BadRequestError
from ....types.error_body import ErrorBody
from ....errors.unauthorized_error import UnauthorizedError
from ....errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FreezesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        freezes: typing.Sequence[CreateStreakFreezesRequestFreezesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateStreakFreezesResponse:
        """
        Create streak freezes for multiple users.

        Parameters
        ----------
        freezes : typing.Sequence[CreateStreakFreezesRequestFreezesItem]
            Array of freezes to create. Maximum 1,000 freezes per request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateStreakFreezesResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi
        from trophy.admin.streaks.freezes import CreateStreakFreezesRequestFreezesItem

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.admin.streaks.freezes.create(
            freezes=[
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-123",
                ),
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-456",
                ),
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-123",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "streaks/freezes",
            base_url=self._client_wrapper.get_environment().admin,
            method="POST",
            json={
                "freezes": convert_and_respect_annotation_metadata(
                    object_=freezes,
                    annotation=typing.Sequence[CreateStreakFreezesRequestFreezesItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateStreakFreezesResponse,
                    parse_obj_as(
                        type_=CreateStreakFreezesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFreezesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        freezes: typing.Sequence[CreateStreakFreezesRequestFreezesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateStreakFreezesResponse:
        """
        Create streak freezes for multiple users.

        Parameters
        ----------
        freezes : typing.Sequence[CreateStreakFreezesRequestFreezesItem]
            Array of freezes to create. Maximum 1,000 freezes per request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateStreakFreezesResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi
        from trophy.admin.streaks.freezes import CreateStreakFreezesRequestFreezesItem

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.admin.streaks.freezes.create(
                freezes=[
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-123",
                    ),
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-456",
                    ),
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-123",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "streaks/freezes",
            base_url=self._client_wrapper.get_environment().admin,
            method="POST",
            json={
                "freezes": convert_and_respect_annotation_metadata(
                    object_=freezes,
                    annotation=typing.Sequence[CreateStreakFreezesRequestFreezesItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateStreakFreezesResponse,
                    parse_obj_as(
                        type_=CreateStreakFreezesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
