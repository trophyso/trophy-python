# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from .event_response_metrics_item_completed_item import (
    EventResponseMetricsItemCompletedItem,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class EventResponseMetricsItem(UniversalBaseModel):
    trigger: typing.Optional[str] = pydantic.Field(default=None)
    """
    The trigger of the achievement, in this case either 'metric' or 'streak'.
    """

    metric_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="metricId")
    ] = pydantic.Field(default=None)
    """
    The ID of the metric that these achievements are associated with, if any.
    """

    completed: typing.List[EventResponseMetricsItemCompletedItem] = pydantic.Field()
    """
    A list of any new achievements that the user has now completed as a result of this event being submitted.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
