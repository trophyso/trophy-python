# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from .leaderboard_response_status import LeaderboardResponseStatus
from .leaderboard_response_rank_by import LeaderboardResponseRankBy
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MetricEventLeaderboardResponse(UniversalBaseModel):
    end: typing.Optional[str] = pydantic.Field(default=None)
    """
    The end date of the current run of the leaderboard, or null if the run never ends.
    """

    rank: typing.Optional[int] = pydantic.Field(default=None)
    """
    The user's rank in the leaderboard, or null if the user is not on the leaderboard.
    """

    previous_rank: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="previousRank")
    ] = pydantic.Field(default=None)
    """
    The user's rank in the leaderboard before the event, or null if the user was not on the leaderboard before the event.
    """

    threshold: float = pydantic.Field()
    """
    The minimum value required to enter the leaderboard according to its current rankings.
    """

    id: str = pydantic.Field()
    """
    The unique ID of the leaderboard.
    """

    name: str = pydantic.Field()
    """
    The user-facing name of the leaderboard.
    """

    key: str = pydantic.Field()
    """
    The unique key used to reference the leaderboard in APIs.
    """

    status: typing.Optional[LeaderboardResponseStatus] = pydantic.Field(default=None)
    """
    The status of the leaderboard.
    """

    rank_by: typing_extensions.Annotated[
        LeaderboardResponseRankBy, FieldMetadata(alias="rankBy")
    ] = pydantic.Field()
    """
    What the leaderboard ranks by.
    """

    metric_key: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="metricKey")
    ] = pydantic.Field(default=None)
    """
    The key of the metric to rank by, if rankBy is 'metric'.
    """

    metric_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="metricName")
    ] = pydantic.Field(default=None)
    """
    The name of the metric to rank by, if rankBy is 'metric'.
    """

    points_system_key: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="pointsSystemKey")
    ] = pydantic.Field(default=None)
    """
    The key of the points system to rank by, if rankBy is 'points'.
    """

    points_system_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="pointsSystemName")
    ] = pydantic.Field(default=None)
    """
    The name of the points system to rank by, if rankBy is 'points'.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user-facing description of the leaderboard.
    """

    start: str = pydantic.Field()
    """
    The start date of the leaderboard in YYYY-MM-DD format.
    """

    max_participants: typing_extensions.Annotated[
        int, FieldMetadata(alias="maxParticipants")
    ] = pydantic.Field()
    """
    The maximum number of participants in the leaderboard.
    """

    run_unit: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="runUnit")
    ] = pydantic.Field(default=None)
    """
    The repetition type for recurring leaderboards, or null for one-time leaderboards.
    """

    run_interval: typing_extensions.Annotated[
        int, FieldMetadata(alias="runInterval")
    ] = pydantic.Field()
    """
    The interval between repetitions, relative to the start date and repetition type.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
