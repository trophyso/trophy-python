# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MultiStageAchievementResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique ID of the achievement.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of this achievement.
    """

    badge_url: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="badgeUrl")
    ] = pydantic.Field(default=None)
    """
    The URL of the badge image for the achievement, if one has been uploaded.
    """

    metric_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="metricId")
    ] = pydantic.Field(default=None)
    """
    The ID of the metric associated with this achievement, if any.
    """

    metric_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="metricValue")
    ] = pydantic.Field(default=None)
    """
    The value of the metric required to complete the achievement, if this achievement is associated with a metric.
    """

    metric_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="metricName")
    ] = pydantic.Field(default=None)
    """
    The name of the metric associated with this achievement, if any.
    """

    key: typing.Optional[str] = pydantic.Field(default=None)
    """
    The key used to reference this achievement in the API.
    """

    achieved_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="achievedAt")
    ] = pydantic.Field(default=None)
    """
    The date and time the achievement was completed, in ISO 8601 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
