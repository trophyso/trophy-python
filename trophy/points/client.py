# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.points_summary_response import PointsSummaryResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unauthorized_error import UnauthorizedError
from ..types.error_body import ErrorBody
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.points_trigger_response import PointsTriggerResponse
from ..core.client_wrapper import AsyncClientWrapper


class PointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def summary(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PointsSummaryResponse:
        """
        Get a breakdown of the number of users with points in each range.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSummaryResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.points.summary()
        """
        _response = self._client_wrapper.httpx_client.request(
            "points/summary",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PointsSummaryResponse,
                    parse_obj_as(
                        type_=PointsSummaryResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def triggers(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[PointsTriggerResponse]:
        """
        Get all points triggers.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PointsTriggerResponse]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.points.triggers()
        """
        _response = self._client_wrapper.httpx_client.request(
            "points/triggers",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[PointsTriggerResponse],
                    parse_obj_as(
                        type_=typing.List[PointsTriggerResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def summary(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PointsSummaryResponse:
        """
        Get a breakdown of the number of users with points in each range.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSummaryResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.points.summary()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "points/summary",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PointsSummaryResponse,
                    parse_obj_as(
                        type_=PointsSummaryResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def triggers(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[PointsTriggerResponse]:
        """
        Get all points triggers.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PointsTriggerResponse]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.points.triggers()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "points/triggers",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[PointsTriggerResponse],
                    parse_obj_as(
                        type_=typing.List[PointsTriggerResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
