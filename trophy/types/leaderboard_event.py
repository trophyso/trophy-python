# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import datetime as dt
import pydantic
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LeaderboardEvent(UniversalBaseModel):
    """
    A leaderboard event representing a change in a user's rank or value.
    """

    time: dt.datetime = pydantic.Field()
    """
    The timestamp when the event occurred.
    """

    previous_rank: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="previousRank")
    ] = pydantic.Field(default=None)
    """
    The user's rank before this event, or null if they were not on the leaderboard.
    """

    rank: typing.Optional[int] = pydantic.Field(default=None)
    """
    The user's rank after this event, or null if they are no longer on the leaderboard.
    """

    previous_value: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="previousValue")
    ] = pydantic.Field(default=None)
    """
    The user's value before this event, or null if they were not on the leaderboard.
    """

    value: typing.Optional[int] = pydantic.Field(default=None)
    """
    The user's value after this event, or null if they are no longer on the leaderboard.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
