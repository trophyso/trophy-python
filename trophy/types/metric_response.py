# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from .streak_frequency import StreakFrequency
from ..core.serialization import FieldMetadata
from .metric_status import MetricStatus
import typing
from .multi_stage_achievement_response import MultiStageAchievementResponse
from .streak_response import StreakResponse
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MetricResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique ID of the metric.
    """

    key: str = pydantic.Field()
    """
    The unique key of the metric.
    """

    name: str = pydantic.Field()
    """
    The name of the metric.
    """

    emoji: str = pydantic.Field()
    """
    The emoji to represent the metric.
    """

    streak_frequency: typing_extensions.Annotated[
        StreakFrequency, FieldMetadata(alias="streakFrequency")
    ] = pydantic.Field()
    """
    The frequency of the streak.
    """

    status: MetricStatus = pydantic.Field()
    """
    The status of the metric.
    """

    current: float = pydantic.Field()
    """
    The user's current total for the metric.
    """

    achievements: typing.List[MultiStageAchievementResponse] = pydantic.Field()
    """
    A list of the metric's achievements and the user's progress towards each.
    """

    current_streak: typing_extensions.Annotated[
        typing.Optional[StreakResponse], FieldMetadata(alias="currentStreak")
    ] = pydantic.Field(default=None)
    """
    The user's current streak for the metric, if the metric has streaks enabled.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
