# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LeaderboardRanking(UniversalBaseModel):
    """
    A user's ranking in a leaderboard.
    """

    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")] = (
        pydantic.Field()
    )
    """
    The ID of the user.
    """

    user_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="userName")
    ] = pydantic.Field(default=None)
    """
    The name of the user. May be null if no name is set.
    """

    rank: int = pydantic.Field()
    """
    The user's rank in the leaderboard.
    """

    value: int = pydantic.Field()
    """
    The user's value for this leaderboard (points, metric value, etc.).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
